import argparse
import os 
import sys
import operator as op
from Stat import *

parser = argparse.ArgumentParser(description='This script will take in a stat file generated by the genStats.py script. It will compute the ratios of regions for each gene based on the attribute specified, i.e. median, mean, q1, max, etc.')
parser.add_argument('stat', help='A stat file generated from genStat.py')
#parser.add_argument('',help='')
parser.add_argument('-op', '--operator', default='/', help='The operation to perform between the attributes. Default = div', choices=('add', 'div', 'mod', 'mul', 'pow', 'sub'))
parser.add_argument('-a', '--attribute', default='median', help='The attribute to use. Default = median', choices=('median', 'mean', '_max', '_min', 'q1', 'q3', 'total', 'length'))

args = parser.parse_args()

def groupedStatToRatios(grouped_stat, op, attr):
    result = {}
    for chrom in grouped_stat:
        if chrom not in result:
            result[chrom] = {}
        for gene in grouped_stat[chrom]:
            if gene not in result[chrom]:
                result[chrom][gene] = []
            nregions = len(grouped_stat[chrom][gene])
            strand = grouped_stat[chrom][gene][0].strand
            for i in xrange(nregions - 1):
                for j in xrange(i + 1, nregions):
                    if strand == '+':
                        ratio = op.op(getattr(grouped_stat[chrom][gene][j], attr), getattr(grouped_stat[chrom][gene][i], attr))
                    else:
                        ratio = op.op(getattr(grouped_stat[chrom][gene][i], attr), getattr(grouped_stat[chrom][gene][j], attr))
                    result[chrom][gene].append(ratio)
            if strand == '-':
                result[chrom][gene] = result[chrom][gene][::-1]
    return result

def outputRatios(result):
    for chrom in result:
        for gene in result[chrom]:
            print '{}\t{}\t{}\n'.format(chrom, gene, (',').join([str(x) for x in result[chrom][gene]]))

stat = Stat.parseStat(args.stat)
gstat = Stat.groupStat(stat)
ratios = groupedStatToRatios(gstat, args.operator, args.attribute)
outputRatios(ratios)
