import argparse
import os 
import sys
import operator
from Stat import *

parser = argparse.ArgumentParser(description='This script will take in a stat file generated by the genStats.py script. It will compute the ratios of regions for each gene based on the attribute specified, i.e. median, mean, q1, max, etc.')
parser.add_argument('stat', help='A stat file generated from genStat.py')
#parser.add_argument('',help='')
parser.add_argument('-op', '--operator', default='div', help='The operation to perform between the attributes. Default = div', choices=('add', 'div', 'mod', 'mul', 'pow', 'sub'))
parser.add_argument('-a', '--attribute', default='median', help='The attribute to use. Default = median', choices=('median', 'mean', '_max', '_min', 'q1', 'q3', 'total', 'length'))

args = parser.parse_args()

operations = {
    'add': operator.add,
    'div': operator.div,
    'mod': operator.mod,
    'mul': operator.mul,
    'pow': operator.pow,
    'sub': operator.sub,
}

def groupedStatToRatios(grouped_stat, operations, op, attr):
    result = {}
    for chrom in grouped_stat:
        if chrom not in result:
            result[chrom] = {}
        for gene in grouped_stat[chrom]:
            if gene not in result[chrom]:
                result[chrom][gene] = []
            nregions = len(grouped_stat[chrom][gene])
            strand = grouped_stat[chrom][gene][0].strand
            for i in xrange(nregions - 1):
                shorter = grouped_stat[chrom][gene][i]
                sattr = getattr(shorter, attr)
                for j in xrange(i + 1, nregions):
                    longer = grouped_stat[chrom][gene][j]
                    lattr = getattr(longer, attr)
                    if strand == '+':
                        ratio = operations[op](lattr, sattr)
                    else:
                        ratio = operations[op](sattr, lattr)
                    item = (
                        chrom,
                        gene,
                        strand,
                        longer.start,
                        longer.end,
                        longer.length,
                        i,
                        lattr,
                        shorter.start,
                        shorter.end,
                        shorter.length,
                        j,
                        sattr,
                        ratio
                    )
                    result[chrom][gene].append(item)
            if strand == '-':
                result[chrom][gene] = result[chrom][gene][::-1]
    return result

def outputRatios(result):
    header = ('\t').join((
        'CHROM',
        'GENE',
        'STRAND',
        'START_LONG',
        'END_LONG',
        'LENGTH_LONG',
        'INDEX_LONG',
        'ATTRIBUTE_LONG',
        'START_SHORT',
        'END_SHORT',
        'LENGTH_SHORT',
        'INDEX_SHORT',
        'ATTRIBUTE_SHORT',
        'RATIO'
    ))
    sys.stdout.write(header + '\n')
    for chrom in result:
        for gene in result[chrom]:
            for item in result[chrom][gene]:
                sys.stdout.write(
                    ('\t').join([
                        str(x) for x in item
                    ]) + '\n'
                )

stat = Stat.parseStat(args.stat)
gstat = Stat.groupStat(stat)
ratios = groupedStatToRatios(gstat, operations, args.operator, args.attribute)
outputRatios(ratios)
